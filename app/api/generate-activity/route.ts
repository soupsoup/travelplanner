import { NextRequest, NextResponse } from 'next/server';
import Anthropic from '@anthropic-ai/sdk';

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

export async function POST(request: NextRequest) {
  try {
    const { trip, prompt, day, existingActivities } = await request.json();

    if (!trip || !prompt) {
      return NextResponse.json(
        { success: false, error: 'Trip and prompt are required' },
        { status: 400 }
      );
    }

    // Create a comprehensive prompt for AI activity generation
    const aiPrompt = `You are a travel planning expert. I need you to create a new activity for an existing trip itinerary.

Trip Context:
- Destination: ${trip.destination}
- Duration: ${trip.daysCount} days
- Travelers: ${trip.travelers}
- Travel Style: ${trip.travelStyle || 'Not specified'}
- Budget: ${trip.budget || 'Not specified'}
- Day: ${day}

Existing Activities for Day ${day}:
${existingActivities.length > 0 
  ? existingActivities.map((activity: any, index: number) => 
      `${index + 1}. ${activity.title} (${activity.time}) - ${activity.description}`
    ).join('\n')
  : 'No activities planned yet for this day'
}

User's Request: ${prompt}

Please create a new activity that:
1. Fits the user's description
2. Complements the existing activities for the day (if any)
3. Is appropriate for the destination and travel style
4. Fits within the budget constraints
5. Has realistic timing and location

Generate a complete activity with the following structure in JSON format:
{
  "title": "Activity name",
  "description": "Detailed description of the activity",
  "time": "Suggested time (e.g., '2:00 PM - 4:00 PM')",
  "location": "Specific location or area",
  "cost": estimated_cost_in_dollars,
  "type": "activity_type (restaurant, hotel, transport, activity, sightseeing, shopping, nature, navigation)",
  "priority": "priority_level (low, medium, high)",
  "tips": "Helpful tips or insider knowledge about this activity"
}

Make sure the activity is:
- Specific to the destination
- Realistic and achievable
- Well-timed to fit with other activities
- Appropriate for the number of travelers
- Within budget constraints
- Engaging and interesting

Return only the JSON object, no additional text.`;

    const message = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 800,
      temperature: 0.7,
      messages: [
        {
          role: 'user',
          content: aiPrompt
        }
      ]
    });

    const responseText = message.content[0].type === 'text' ? message.content[0].text : 'Error generating activity';
    
    // Try to parse the JSON response
    let activity;
    try {
      // Extract JSON from the response (in case there's extra text)
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        activity = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('No JSON found in response');
      }
    } catch (parseError) {
      console.error('Error parsing AI response:', parseError);
      console.error('Raw response:', responseText);
      
      // Fallback: create a basic activity structure
      activity = {
        title: 'AI Generated Activity',
        description: responseText,
        time: 'TBD',
        location: trip.destination,
        cost: 50,
        type: 'activity',
        priority: 'medium',
        tips: 'Generated by AI - please review and adjust as needed'
      };
    }

    // Validate and set defaults for required fields
    activity = {
      title: activity.title || 'New Activity',
      description: activity.description || 'AI generated activity',
      time: activity.time || 'TBD',
      location: activity.location || trip.destination,
      cost: activity.cost || 50,
      type: activity.type || 'activity',
      priority: activity.priority || 'medium',
      tips: activity.tips || '',
      ...activity
    };

    return NextResponse.json({
      success: true,
      activity,
      data: {
        tripDestination: trip.destination,
        day,
        prompt
      }
    });

  } catch (error) {
    console.error('Error generating activity:', error);
    
    // Handle specific Anthropic errors
    if (error instanceof Error) {
      if (error.message.includes('401')) {
        return NextResponse.json(
          { success: false, error: 'Authentication failed: Invalid API key' },
          { status: 401 }
        );
      } else if (error.message.includes('429')) {
        return NextResponse.json(
          { success: false, error: 'Rate limit exceeded: Too many requests' },
          { status: 429 }
        );
      } else if (error.message.includes('403')) {
        return NextResponse.json(
          { success: false, error: 'Access denied: API key lacks permissions' },
          { status: 403 }
        );
      }
    }
    
    return NextResponse.json(
      { success: false, error: 'Failed to generate activity' },
      { status: 500 }
    );
  }
} 